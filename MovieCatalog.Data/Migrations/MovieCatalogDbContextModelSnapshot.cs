// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using MovieCatalog.Data;
using MovieCatalog.Data.Models.Enums;
using System;

namespace MovieCatalog.Data.Migrations
{
    [DbContext(typeof(MovieCatalogDbContext))]
    partial class MovieCatalogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImdbId")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OfficialName")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.GoldenGlobe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("GoldenGlobes");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.HomeVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode")
                        .HasMaxLength(13);

                    b.Property<string>("BlurayDotComId")
                        .HasMaxLength(100);

                    b.Property<int>("ContentRating");

                    b.Property<int>("CountryId");

                    b.Property<int>("DiscFormat");

                    b.Property<int>("DiscLayers");

                    b.Property<int>("DiscTotal");

                    b.Property<string>("Edition")
                        .HasMaxLength(100);

                    b.Property<bool>("InCollection");

                    b.Property<int>("MovieId");

                    b.Property<DateTime>("Releasedate");

                    b.Property<int>("Runtime");

                    b.Property<string>("Synopsis")
                        .HasMaxLength(10000);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("MovieId");

                    b.ToTable("HomeVideos");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.HomeVideoSubtitle", b =>
                {
                    b.Property<int>("HomeVideoId");

                    b.Property<int>("SubtitleId");

                    b.HasKey("HomeVideoId", "SubtitleId");

                    b.HasIndex("SubtitleId");

                    b.ToTable("HomeVideosSubtitles");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieArtistGoldenGlobe", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("ArtistId");

                    b.Property<int>("GoldenGlobeId");

                    b.Property<int>("Role");

                    b.Property<string>("Notes")
                        .HasMaxLength(200);

                    b.Property<int>("Year");

                    b.HasKey("MovieId", "ArtistId", "GoldenGlobeId", "Role");

                    b.HasIndex("ArtistId");

                    b.HasIndex("GoldenGlobeId");

                    b.ToTable("MoviesArtistsGoldenGlobes");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieArtistOscar", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("ArtistId");

                    b.Property<int>("OscarId");

                    b.Property<int>("Role");

                    b.Property<string>("Notes")
                        .HasMaxLength(200);

                    b.Property<int>("Year");

                    b.HasKey("MovieId", "ArtistId", "OscarId", "Role");

                    b.HasIndex("ArtistId");

                    b.HasIndex("OscarId");

                    b.ToTable("MoviesArtistsOscars");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieCast", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("ArtistId");

                    b.Property<string>("Character")
                        .HasMaxLength(100);

                    b.HasKey("MovieId", "ArtistId", "Character");

                    b.HasIndex("ArtistId");

                    b.ToTable("MoviesCasts");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieColor", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("ColorId");

                    b.HasKey("MovieId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("MoviesColors");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieCountry", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("CountryId");

                    b.HasKey("MovieId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("MoviesCountries");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieCrew", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("ArtistId");

                    b.Property<int>("Role");

                    b.HasKey("MovieId", "ArtistId", "Role");

                    b.HasIndex("ArtistId");

                    b.ToTable("MoviesCrews");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieGenre", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("GenreId");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MoviesGenres");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieLanguage", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("LanguageId");

                    b.HasKey("MovieId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("MoviesLanguages");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieStudio", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("StudioId");

                    b.Property<int>("Role");

                    b.HasKey("MovieId", "StudioId");

                    b.HasIndex("StudioId");

                    b.ToTable("MoviesStudios");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BoxOfficeMojoId")
                        .HasMaxLength(100);

                    b.Property<decimal>("Budget");

                    b.Property<DateTime>("CreationDate");

                    b.Property<decimal>("GrossForeign");

                    b.Property<decimal>("GrossUsa");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(9);

                    b.Property<int>("ImdbTop250");

                    b.Property<double>("ImdbUsersRating");

                    b.Property<string>("OriginalTitle")
                        .HasMaxLength(100);

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(2000);

                    b.Property<int>("ProductionYear");

                    b.Property<int>("RottenTomatoesCriticsScore");

                    b.Property<string>("RottenTomatoesId")
                        .HasMaxLength(100);

                    b.Property<int>("RottenTomatoesUsersScore");

                    b.Property<int>("Runtime");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Synopsis")
                        .HasMaxLength(10000);

                    b.Property<byte[]>("Thumbnail")
                        .HasMaxLength(1048576);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Oscar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Oscars");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArtistId");

                    b.Property<byte[]>("Image")
                        .HasMaxLength(20971520);

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Poster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Image")
                        .HasMaxLength(20971520);

                    b.Property<int>("MovieId");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Posters");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Release", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("LocationId");

                    b.Property<int>("MovieId");

                    b.Property<int>("Role");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MovieId");

                    b.ToTable("Releases");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int>("MovieId");

                    b.Property<int>("Stars");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MovieId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Studio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Role");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Studios");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MovieCatalog.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.HomeVideo", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.Country", "Country")
                        .WithMany("HomeVideos")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MovieCatalog.Data.Models.Movie", "Movie")
                        .WithMany("HomeVideos")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.HomeVideoSubtitle", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.HomeVideo", "HomeVideo")
                        .WithMany("Subtitles")
                        .HasForeignKey("HomeVideoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MovieCatalog.Data.Models.Language", "Subtitle")
                        .WithMany("HomeVideos")
                        .HasForeignKey("SubtitleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieArtistGoldenGlobe", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.Artist", "Artist")
                        .WithMany("MoviesGoldenGlobes")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MovieCatalog.Data.Models.GoldenGlobe", "GoldenGlobe")
                        .WithMany("MoviesArtists")
                        .HasForeignKey("GoldenGlobeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MovieCatalog.Data.Models.Movie", "Movie")
                        .WithMany("ArtistsGoldenGlobes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieArtistOscar", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.Artist", "Artist")
                        .WithMany("MoviesOscars")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MovieCatalog.Data.Models.Movie", "Movie")
                        .WithMany("ArtistsOscars")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MovieCatalog.Data.Models.Oscar", "Oscar")
                        .WithMany("MoviesArtists")
                        .HasForeignKey("OscarId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieCast", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.Artist", "Artist")
                        .WithMany("MoviesCasts")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MovieCatalog.Data.Models.Movie", "Movie")
                        .WithMany("MoviesCasts")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieColor", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.Color", "Color")
                        .WithMany("Movies")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MovieCatalog.Data.Models.Movie", "Movie")
                        .WithMany("Colors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieCountry", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.Country", "Country")
                        .WithMany("Movies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MovieCatalog.Data.Models.Movie", "Movie")
                        .WithMany("Countries")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieCrew", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.Artist", "Artist")
                        .WithMany("MoviesCrews")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MovieCatalog.Data.Models.Movie", "Movie")
                        .WithMany("MoviesCrews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieGenre", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MovieCatalog.Data.Models.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieLanguage", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.Language", "Language")
                        .WithMany("Movies")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MovieCatalog.Data.Models.Movie", "Movie")
                        .WithMany("Languages")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.ManyToMany.MovieStudio", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.Movie", "Movie")
                        .WithMany("Studios")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MovieCatalog.Data.Models.Studio", "Studio")
                        .WithMany("Movies")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Movie", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.User", "User")
                        .WithMany("Movies")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Photo", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.Artist", "Artist")
                        .WithMany("Photos")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Poster", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.Movie", "Movie")
                        .WithMany("Posters")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Release", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.Country", "Country")
                        .WithMany("Releases")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MovieCatalog.Data.Models.Location", "Location")
                        .WithMany("Releases")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MovieCatalog.Data.Models.Movie", "Movie")
                        .WithMany("Releases")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieCatalog.Data.Models.Review", b =>
                {
                    b.HasOne("MovieCatalog.Data.Models.User", "Author")
                        .WithMany("Reviews")
                        .HasForeignKey("AuthorId");

                    b.HasOne("MovieCatalog.Data.Models.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
